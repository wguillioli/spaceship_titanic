group_by(disease_fct) %>%
summarise(median = median(maxhr),
p25 = quantile(maxhr, p = 0.25),
p75 = quantile(maxhr, p = 0.75))
#$ thal    <dbl> 3, 7, 7, 7, 3, 7, 6, 7, 7, 7, 7, 7, 3, 3, 3, 3, 7, 7, 3, 7, …
# thal: 3 = normal; 6 = fixed defect; 7 = reversable defect
(t <- table(d$thal, d$disease_fct))
round(prop.table(t, margin = 2), 2) # great power 1-2, 3 low n so bin with 1
(t <- table(d$thal_fct, d$disease_fct))
round(prop.table(t, margin = 2), 2) # great power 1-2, 3 low n so bin with 1
#raw data
t <- table(d$thal, d$disease_fct)
p <- round(prop.table(t,2),2)
#print(t)
#print(p)
rownames(t) <- c("No", "Yes")
p
#print(t)
#print(p)
colnames(t) <- c("No", "Yes")
#raw data
t <- table(d$disease_fct, d$thal)
t
#prepped data
t <- table(d$disease_fct, d$thal_fct)
p <- round(prop.table(t,2),1)
p
?corrplot
num_vars <- sapply(d, is.numeric)
r <- round(cor(d[ ,num_vars]),2)
corrplot::corrplot(r, method = "square", type = "lower", order = "alphabet",
tl.srt = 45, tl.col = "dark gray")
corrplot::corrplot(r,
method = "square",
type = "lower",
order = "hclust"
)
corrplot::corrplot(r,
method = "square",
type = "lower",
order = "hclust"
tl.srt = 45,
corrplot::corrplot(r,
method = "square",
type = "lower",
order = "hclust"
tl.srt = 45,
corrplot::corrplot(r,
method = "square",
type = "lower",
order = "hclust",
tl.srt = 45,
tl.col = "black",
)
corrplot::corrplot(r,
method = "square",
type = "lower",
order = "hclust",
tl.srt = 45,
tl.col = "black",
addrect = 2
)
corrplot::corrplot(r,
method = "square",
type = "lower",
order = "alphabet",
tl.srt = 45,
tl.col = "black"
)
importance_df$feature <- c ("Patient's age",
"Resting blood pressure",
"Maximum heart rate (beats per minute)",
"ST depression induced by exercise relative to rest",
"Patient's sex",
"Chest pain type",
"Fasting blood sugar",
"Resting electrocardiographic results",
"Angina (Exercise-induced chest pain)",
"Number of major vessels colored by flourosopy",
"Slope of the peak exercise ST segment",
"Results of thallium stress test",
"Serum cholestoral in mg/dl")
ggplot(importance_df, aes(reorder(feature, +N), N)) + # , #fill=feature)) +
cust_theme +
geom_col(fill = cbPalette[3]) +
coord_flip() +
ylab("\nMean Decrease accuracy?") +
xlab("Patient attribute\n")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) #clean environment
require(tidyverse)
require(caret)
require(utils)
require(randomForest)
require(hash)
require(rpart)
require(rpart.plot)
require(latexpdf)
require(kableExtra)
require(corrplot)
require(ggthemes)
#require(Dict)
wd <- "C:\\GitHub\\heart_disease\\"
get_percentiles <- function(column){
print(quantile(column,
prob = c(0, 0.01, 0.05, 0.10, 0.25, 0.50,
0.75, 0.90, 0.95, 0.99, 1)))
}
# Custom ggplot theme
cust_theme <- theme_minimal() +
theme(panel.grid.major = element_line(color = "#e1e1e1",  linetype = "dotted"),
panel.grid.minor = element_blank(),
legend.position  = "bottom",
legend.key       = element_blank())
#        legend.key.width = unit(1, "cm"),
#        axis.title   = element_text(size = 10, color = "#555555"),
#        axis.text    = element_text(size = 10, color = "#555555"),
#axis.title.x = element_text(vjust = 1, margin = margin(10, 0, 0, 0)),
#        axis.title.y = element_text(vjust = 1),
#        axis.ticks   = element_line(color = "#e1e1e1", linetype = "dotted", size = .1),
#        axis.text.x  = element_text(vjust = .3),
#        plot.margin = unit(c(.5, .75, .5, .5), "cm")
#        )
# theme_tufte()
# https://colorbrewer2.org/#type=sequential&scheme=Oranges&n=9
# color blind friendly palette
cbPalette <- c("#E69F00", "#999999", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7",
"#CC6666", "#9999CC", "#66CC99") #2nd line is extra
dat_file_path <- paste0(wd, "/data/heart.dat")
readLines(dat_file_path, n=10)
d <- read.table(dat_file_path)
dim(d) #270 x 14 as expected
column_names <- c("age",
"sex",
"pain",
"blood",
"chol",
"sugar",
"electro",
"maxhr",
"angina",
"oldpeak",
"slope",
"vessels",
"thal",
"disease" #y
)
colnames(d) <- column_names
sum(is.na(d)) #confirm no NAs
glimpse(d)
summary(d)
#$ disease <int> 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, ...
# Absence (1) or presence (2) of heart disease
d %>%
group_by(disease) %>%
tally() %>%
mutate(p = n/sum(n)) #1 56%, 2 44%
d <- d %>%
mutate(disease_fct = case_match(d$disease, 1 ~ "N", 2 ~ "Y", .default = NA)) %>%
mutate(disease_fct= as.factor(disease_fct)) %>%
select(-disease)
# For numeric, see distribution, cap or convert scale to normalize, see
# potential of prediction for disease (remove if none), bin/flag if appropriate
# For discrete, see potential of prediction and bin as needed to help ML
#$ age     <dbl> 70, 67, 57, 64, 74, 65, 56, 59, 60, 63, 59, 53, 44, 61, 57, …
get_percentiles(d$age) #29 to 77
hist(d$age)
boxplot(age ~ disease_fct, d, horizontal = TRUE) #some power of prediction
d %>%
group_by(disease_fct) %>%
summarise(median = median(age),
p25 = quantile(age, p = 0.25),
p75 = quantile(age, p = 0.75))
#$ sex     <dbl> 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, …
# 0: female, 1: male
d <- d %>%
mutate(sex_fct = as.factor(recode(d$sex, '0' = "F", '1' = "M")))
d %>%
group_by(sex_fct) %>%
tally() %>%
mutate(p=n/sum(n)) #68%M, 32%F
(t <- table(d$sex_fct, d$disease_fct))
round(prop.table(t, margin = 2), 2) #higher % of males get Y, so has power
#$ pain    <dbl> 4, 3, 2, 4, 2, 4, 3, 4, 4, 4, 4, 4, 3, 1, 4, 4, 4, 4, 1, 1, 4 …
(t <- table(d$pain, d$disease_fct))
round(prop.table(t, margin = 2), 2) #good power 4 vs others, 1-3 low count
d <- d %>%
mutate(pain_fct = as.factor(ifelse(pain == 4, "4", "1-3")))
#$ sugar   <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,…
# fasting blood sugar > 120 mg/dl
(t <- table(d$sugar, d$disease_fct))
round(prop.table(t, margin = 2), 2) # no power
d <- d %>%
mutate(sugar_fct = as.factor(recode(d$sugar, '0' = "N", '1' = "Y")))
#$ electro <dbl> 2, 2, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2 …
# resting electrocardiographic results  (values 0,1,2)
(t <- table(d$electro, d$disease_fct))
round(prop.table(t, margin = 2), 2) # good power, combine 0-1 due to low n
d <- d %>%
mutate(electro_fct = as.factor(ifelse(electro == 2, "2", "0-1")))
#$ angina  <dbl> 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1,…
d <- d %>%
mutate(angina_fct = as.factor(recode(d$angina, '0' = "N", '1' = "Y")))
(t <- table(d$angina_fct, d$disease_fct))
round(prop.table(t, margin = 2), 2) # good power
#$ vessels <dbl> 3, 0, 0, 1, 1, 0, 1, 1, 2, 3, 0, 0, 0, 2, 1, 0, 2, 0, 0, 0, 2,…
(t <- table(d$vessels, d$disease_fct))
round(prop.table(t, margin = 2), 2) # good power but low n, bin 0-1 & 2-3
d <- d %>%
mutate(vessels_fct = as.factor(ifelse(vessels %in% c(0,1), "0-1", "2-3")))
#$ slope   <dbl> 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 3, 2, 1, …
(t <- table(d$slope, d$disease_fct))
round(prop.table(t, margin = 2), 2) # great power 1-2, 3 low n so bin with 1
d <- d %>%
mutate(slope_fct = as.factor(ifelse(slope %in% c(1,3), "1/3", "2")))
#$ thal    <dbl> 3, 7, 7, 7, 3, 7, 6, 7, 7, 7, 7, 7, 3, 3, 3, 3, 7, 7, 3, 7, …
# thal: 3 = normal; 6 = fixed defect; 7 = reversable defect
(t <- table(d$thal, d$disease_fct))
round(prop.table(t, margin = 2), 2) # great power 1-2, 3 low n so bin with 1
d <- d %>%
mutate(thal_fct = as.factor(ifelse(thal %in% c(3,6), "normal/fixed", "reversable")))
(t <- table(d$thal_fct, d$disease_fct))
round(prop.table(t, margin = 2), 2) # great power 1-2, 3 low n so bin with 1
#$ maxhr   <dbl> 109, 160, 141, 105, 121, 140, 142, 142, 170, 154, 161, 111, ...
get_percentiles(d$maxhr) #71 to 202
hist(d$maxhr) #normalize but could cap at left but won't for now
boxplot(maxhr ~ disease_fct, d, horizontal = TRUE) #good power of prediction
d %>%
group_by(disease_fct) %>%
summarise(median = median(maxhr),
p25 = quantile(maxhr, p = 0.25),
p75 = quantile(maxhr, p = 0.75))
#$ blood   <dbl> 130, 115, 124, 128, 120, 120, 130, 110, 140, 150, 135, 142, …
# resting_blood_pressure (type: int): resting blood pressure
get_percentiles(d$blood) #94 to 200
hist(d$blood) #normalise but could cap at right
boxplot(blood ~ disease_fct, d, horizontal = TRUE) #no power of prediction
d %>%
group_by(disease_fct) %>%
summarise(median = median(blood),
p25 = quantile(blood, p = 0.25),
p75 = quantile(blood, p = 0.75)) #no power, but will leave
# $ chol    <dbl> 322, 564, 261, 263, 269, 177, 256, 239, 293, 407, 234, 226, 235, 234, 303, 149, 3…
# serum_cholesterol_mg_per_dl (type: int): serum cholestoral in mg/dl
get_percentiles(d$chol) #126 to 564
hist(d$chol) #normalise but could cap at right, but log is better
boxplot(chol ~ disease_fct, d, horizontal = TRUE) #some power
d$chol_log <- log(d$chol)
boxplot(chol_log ~ disease_fct, d, horizontal = TRUE) #some power
d %>%
group_by(disease_fct) %>%
summarise(median = median(chol),
p25 = quantile(chol, p = 0.25),
p75 = quantile(chol, p = 0.75)) #some power
# $ oldpeak <dbl> 2.4, 1.6, 0.3, 0.2, 0.2, 0.4, 0.6, 1.2, 1.2, 4.0, 0.5, 0.0, …
# ST depression induced by exercise relto rest, measure of abnormality in eco
get_percentiles(d$oldpeak) #mostly 0s from 0 to 6.2
hist(d$oldpeak) #skew to zero, no way to normalize
boxplot(oldpeak ~ disease_fct, d, horizontal = TRUE) #strong power
d %>%
group_by(disease_fct) %>%
summarise(median = median(oldpeak),
p25 = quantile(oldpeak, p = 0.25),
p75 = quantile(oldpeak, p = 0.75)) #has power
# add a few discrete vars by cutting to test it out as well
d$oldpeak_flag = as.factor(ifelse(d$oldpeak == 0, 0, 1))
(t <- table(d$oldpeak_flag, d$disease_fct))
round(prop.table(t, margin = 2), 2) # good power
?corrplot
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) #clean environment
require(tidyverse)
require(caret)
require(utils)
require(randomForest)
require(hash)
require(rpart)
require(rpart.plot)
require(latexpdf)
require(kableExtra)
require(corrplot)
require(ggthemes)
wd <- "C:\\GitHub\\heart_disease\\"
get_percentiles <- function(column){
print(quantile(column,
prob = c(0, 0.01, 0.05, 0.10, 0.25, 0.50,
0.75, 0.90, 0.95, 0.99, 1)))
}
# Custom ggplot theme
cust_theme <- theme_minimal() +
theme(panel.grid.major = element_line(color = "#e1e1e1",  linetype = "dotted"),
panel.grid.minor = element_blank(),
legend.position  = "bottom",
legend.key       = element_blank())
cbPalette <- c("#E69F00", "#999999", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7",
"#CC6666", "#9999CC", "#66CC99") #2nd line is extra
corrplot::corrplot(r,
method = "square",
type = "full",
order = "alphabet",
tl.srt = 45,
tl.col = "black"
)
tinytex::install_tinytex()
require(TinyTeX)
require(tinytex)
# -----------------------------------------------------------------------------
# project setup
# -----------------------------------------------------------------------------
rm(list = ls())
require(tidyverse)
require(caret)
require(visdat)
#require(imputeR)
#require(BiocManager)
#BiocManager::install("impute")
#require(impute)
#require(glmnet)
require(mice) #imputations
require(rpart)
require(rattle) #pretty print trees
wd <- "C:/GitHub/spaceship_titanic/"
setwd(wd)
# -----------------------------------------------------------------------------
# read data and create main dataset
# -----------------------------------------------------------------------------
# train
train <- read.csv("./data/train.csv",
stringsAsFactors = FALSE)
glimpse(train)
summary(train)
# test
test <- read.csv("./data/test.csv",
stringsAsFactors = FALSE)
glimpse(test)
summary(test)
# create d
train$dat <- "train"
test$dat <- "test"
test$Transported <- "NA"
d <- bind_rows(train,
test)
glimpse(d)
summary(d)
# -----------------------------------------------------------------------------
# basic data checks & prep
# -----------------------------------------------------------------------------
# y
train %>%
group_by(Transported) %>%
summarise(n = n()) %>%
mutate(p = n/sum(n)) # balanced dataset
# missing values?
sapply(d, function(df){sum(is.na(df)==TRUE);})
vis_miss(d,
sort_miss = TRUE,
#cluster = TRUE,
show_perc_col = TRUE) #no concerning pattern is observed
# add NA flag
# columns with NAs
# re-write a fucntion
vars_na <- c("Age", "RoomService", "FoodCourt", "ShoppingMall", "Spa", "VRDeck")
md.pattern(d[, vars_na],
rotate.names = TRUE) # no patter of concern
# impute NAs
d_imp <- mice(d,
method = "cart")
# https://www.r-bloggers.com/2023/01/imputation-in-r-top-3-ways-for-imputing-missing-data/#:~:text=We%E2%80%99ll%20now%20explore%20a%20suite%20of%20basic%20techniques%20for%20imputation
# https://www.r-bloggers.com/2016/04/missing-value-treatment/#:~:text=Prediction%20is%20most%20advanced%20method%20to%20impute%20your%20missing%20values
# https://www.r-bloggers.com/2015/10/imputing-missing-data-with-r-mice-package/
d_imp
head(complete(d_imp))
d_imp <- data.frame(complete(d_imp))
d <- d_imp
# validate no more NA
sapply(d, function(df){sum(is.na(df)==TRUE);})
# basic tree to get idea of predictors
tr <- d %>%
filter(dat == "train")
head(tr)
mdl_part <- rpart(Transported ~ . -dat,
data = tr)
mdl_part
rpart.plot(mdl_part)
require(rpart.plot)
rpart.plot(mdl_part)
fancyRpartPlot(mdl_part)
mdl_part <- rpart(as.factor(Transported) ~ . -dat,
data = tr)
fancyRpartPlot(mdl_part)
head(d)
mdl_part <- rpart(as.factor(Transported) ~ . -dat -PassengerId -Name,
data = tr)
mdl_part
fancyRpartPlot(mdl_part)
head(d)
mdl_part <- rpart(as.factor(Transported) ~ . -dat -PassengerId -Name
-Cabin,
data = tr)
mdl_part
fancyRpartPlot(mdl_part)
str(d)
#$ Age         : num  39 24 58 33 16 44 26 28 35 14 ...
featurePlot(x = d$Age,
y = d$Transported,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)
))
#$ Age         : num  39 24 58 33 16 44 26 28 35 14 ...
featurePlot(x = d$Age,
y = d$Transported,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)
))
str(d)
#$ Age         : num  39 24 58 33 16 44 26 28 35 14 ...
featurePlot(x = d[,6],
y = d$Transported,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)
))
#$ Age         : num  39 24 58 33 16 44 26 28 35 14 ...
featurePlot(x = d[,c(6,8)],
y = d$Transported,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)
))
#$ Age         : num  39 24 58 33 16 44 26 28 35 14 ...
featurePlot(x = d[,c(6,8)],
y = as.factor(d$Transported),
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)
))
#$ CryoSleep   : chr  "False" "False" "False" "False" ...
d %>%
group_by(CryoSleep) %>%
summarise(n = n(),
p = n/sum(n))
?read.csv
View(d)
#$ CryoSleep   : chr  "False" "False" "False" "False" ...
d %>%
group_by(CryoSleep) %>%
summarise(n = n()) %>%
mutate(p = n/sum(n))
group_by(CryoSleep) %>%
summarise(n = n()) %>%
mutate(p = n/sum(n))
#$ CryoSleep   : chr  "False" "False" "False" "False" ...
d %>%
filter(dat == "train") %>%
group_by(CryoSleep) %>%
summarise(n = n()) %>%
mutate(p = n/sum(n))
#$ VIP         : chr  "False" "False" "True" "False" ...
d %>%
filter(dat == "train") %>%
group_by(VIP) %>%
summarise(n = n()) %>%
mutate(p = n/sum(n))
(t <- table(d$VIP, d$Transported)
#$ Age         : num  39 24 58 33 16 44 26 28 35 14 ...
#$ RoomService : num  0 109 43 0 303 0 42 0 0 0 ...
#$ FoodCourt   : num  0 9 3576 1283 70 ...
#$ ShoppingMall: num  0 25 0 371 151 0 3 0 17 0 ...
#$ Spa         : num  0 549 6715 3329 565 ...
#$ VRDeck      : num  0 44 49 193 2 0 0 0 0 0 ...
#$ PassengerId : chr  "0001_01" "0002_01" "0003_01" "0003_02" ...
#$ HomePlanet  : chr  "Europa" "Earth" "Europa" "Europa" ...
#$ Cabin       : chr  "B/0/P" "F/0/S" "A/0/S" "A/0/S" ...
#$ Destination : chr  "TRAPPIST-1e" "TRAPPIST-1e" "TRAPPIST-1e" "TRAPPIST-1e" ...
#$ Name        : chr  "Maham Ofracculy" "Juanna Vines" "Altark Susent" "Solam Susent" ...
#$ Transported : chr  "False" "True" "False" "False" ...
# hacer func que da vars con NA
# add ISNA flag
# add flag for missing values
# read each var y ver que genero
# total $, passenger id get
# cabin get
# caret rf
# caret boost
# caret svm
# caret knn
# caret mn
# -----------------------------------------------------------------------------
# sandbox to delete
# -----------------------------------------------------------------------------
x <- d[,c("Age", "RoomService")]
(t <- table(d$VIP, d$Transported))
(p <- prop.table(t, 2))
(p <- round(prop.table(t, 2)),2)
(p <- prop.table(t, 2))
(p <- prop.table(t, 1))
(t <- table(d$VIP, d$Transported))
#$ VIP         : chr  "False" "False" "True" "False" ...
d %>%
filter(dat == "train") %>%
group_by(VIP) %>%
summarise(n = n()) %>%
mutate(p = n/sum(n))
(t <- table(d$VIP, d$Transported))
(p <- prop.table(t, 1))
